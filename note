
1. Install Reactjs and Tailwind css and create the first template

            Note: Installed Reactjs and tailwind css and initialize the project

2. Create Pages and Routes

            Note: Installed react-router-dom inorder to use Route, Routes and BrowserRouter

3. Create Header Component

            Note: install npm i react-icons
                - Create a header with title, search input and menu(Home,about, signIn)

4. Create and run the server

            Note: npm init -y  --> Inorder to install package.json in the root directory
                  npm i express

                inlcude below scripts inside package.json:
                  scripts: {
                    "dev": "nodemon api/index.js"
                    "start":"node api/index.js"
                  }  

5. Connect to Database

            Note: npm i mongoose
                  npm i dotenv --> inorder to use process.env.MONGO

6. Create User Model

            Note: created a model for user 

7. Create a test API route            

            Note: create a user.router.js and user.controller.js
                 
                  index.js
                  --------
                  app.use("/api/user",userRouter)

                  user.route.js
                  -------------

                  import express from "express"
                  const router = express.Router();
                  router.get("/test",test)
                  export default router

                  user.controller.js
                  ------------------

                  export const test = (req,res) => {
                    res.json({
                        message:"API Is Working!!!"
                    })
                  }

8. Create sign up API route

            Note: create auth.route.js and auth.controller.js
                 - npm in bcryptjs inorder to encrypt password on entering to the database  
                 - const hashpassword = bcryptjs.hashSync(password,10)
                 // Inorder to encrypt the password


9. Create a middleware and a function to handle possible errors

            Note: Created a error handling middleware
                    app.use((err, req, res, next) => {
                    const statusCode = err.statusCode || 500;
                    const message = err.message || "Internal Server Error";
                    return res.status(statusCode).json({
                        success: false,
                        message,
                        statusCode,
                    });
                    });
                        

10. Complete sign up page UI

            Note: created a UI page for signup
                    Includes username, password,email, signup button 

11. Complete SignUp page Functionality    

            Note: - implement onChange and handleSubmit functionality
                  -  api call to post the data on submit   

12. Create signIn API route

            Note: npm i jsonwebtoken --> Inorder to create a token

13. Complete sign in page functionality

            Note: same as signup page 

14. Add redux toolkit

            Note: Add store.js, userSlice.js

15. Add redux persist

            Note: same as redux we need to use persistor
                  
                  npm i redux-persist

16. Add Google OAuth functionality                  

            Note: npm i firebase

17. Update the header and make the profile page private

            Note: - If the current User is available display the profile image in the header
                    otherwise, display Sign In button.

                  - Also create a private Route component where the profile component only available when the currentUser available otherwise redirect to sign-in page

18. Complete profile page UI

            Note: Build UI for Profile Page

19. Complete image upload functionality

            Note: upload image into firebase

20. Create update user API route

            Note: npm i cookie-parser

21. complete update user functionality

            Note: call update api

22. Add delete user functionality

            Note: Add delete user functionality and delete user api

23. Add signout user functionality

            Note: Remove cookies when signout

24. Add create listing API route

            Note: Create a model for listing, list route, list controller

25. Complete create listing page UI

            Note: Create a listing page UI

26. Complete upload listing images functionality

            Note: Upload images and store in firbase storage

27. Complete create listing page functionality

            Note: Call post api for creating the list data

28. Create get user listings API route

            Note: Create api route for get user listings

29. Complete show user listings functionality

            Note: onClicking show user button call the api for get user listings

30. Complete Delete User listing Functionality

            Note: On clicking delete button call delete list api

31. Create update listing API route

            Note: update listing Api route

32. Complete Update listing functionality

            Note: on loading we need to fetch the data based on id
                  - on uploading it will call update api to update the data

33. Add image slider to the listing page

            Note: npm i swipper
                 - added a swipper to the images

34. Complete Listing Page

            Note:                  



